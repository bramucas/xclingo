
plength(1).

time(0..L) :- plength(L).
step(1..L) :- plength(L).

%% TODO: accept pools as input

% switch(s1;s2).

switch(s1). switch(s2).

% component(r;b).

component(r). component(b).



fluent(relay).

fluent(bulb).

fluent(b_prot).

fluent(S):-switch(S).
fluent(ab(C)) :- component(C).


value(relay,on). value(relay,off).
value(bulb,on). value(bulb,off).
value(S,open) :- switch(S).
value(S,closed) :- switch(S).
hasvalue(F) :- value(F,V).

% Fluents are boolean by default
domain(F,true) :- fluent(F), not hasvalue(F).
domain(F,false) :- fluent(F), not hasvalue(F).
% otherwise, they take the specified values
domain(F,V) :- value(F,V).


agent(close(s1)).

exog(break).

exog(surge).

action(Y):-exog(Y).

action(Y):-agent(Y).



% Inertia
%!trace_rule {"inertia h(%,%,%)",F,V,I}

  h(F,V,I) :- h(F,V,I-1), not c(F,I), step(I).


% Axioms for caused
h(F,V,J) :- c(F,V,J).
c(F,J)   :- c(F,V,J).


% Direct effects

c(s1,closed,I) :- o(close(s1),I), step(I).



% Indirect effects
%!trace_rule {"The relay is working at %",J}

  c(relay,on,J)   :- h(s1,closed,J), h(ab(r),false,J), time(J).

%!trace_rule {"The relay is not working at %",J}

  c(relay,off,J)  :- h(s1,open,J), time(J).

%!trace_rule {"The relay is not working at %",J}

  c(relay,off,J)  :- h(ab(r),true,J), time(J).


c(s2,closed,J)  :- h(relay,on,J), time(J).


%!trace_rule {"The bulb is on at %",J}

  c(bulb,on,J)    :- h(s2,closed,J), h(ab(b),false,J), time(J).

%!trace_rule {"The bulb is off at %",J}

  c(bulb,off,J)   :- h(s2,open,J), time(J).

%!trace_rule {"The bulb is off at %",J}

  c(bulb,off,J)   :- h(ab(b),true,J), time(J).


% Executability

  :- o(close(S),I), h(S,closed,I-1), step(I).



% Malfunctioning
%!trace_rule {"The bulb was damaged at %",I} 
  c(ab(b),true,I) :- o(break,I), step(I).

%!trace_rule {"The relay was damaged at %",I} 

  c(ab(r),true,I) :- o(surge,I), step(I).

%!trace_rule {"The relay was damaged at %",I} 

  c(ab(b),true,I) :- o(surge,I), not h(b_prot,true,I-1), step(I).



% Something happening actually occurs

  o(A,I) :- obs_o(A,I), step(I).



% Check that observations hold

  :- obs_h(F,V,J), not h(F,V,J).



% Completing the initial state

%   1 {h(F,V,0):domain(F,V)} 1 :- fluent(F).

  h(F,V,0) :- domain(F,V), not -h(F,V,0).

  -h(F,V,0) :- h(F,W,0), domain(F,V), W!=V.


% A history

obs_h(s1,open,0).

obs_h(s2,open,0).

obs_h(b_prot,true,0).

obs_h(ab(b),false,0).

obs_h(ab(r),false,0).

obs_o(close(s1),1).

% Something went wrong

obs_h(bulb,off,1).



%!trace {"There was a power surge at %",J} o(surge,J).

%!trace {"Something broke the bulb at %",J} o(break,J).

%!trace {"The agent closed switch s1 at %",J} o(close(s1),J).



% Diagnostic module: generate exogenous actions

% { o(Z,I): exog(Z) } :- step(I).

  o(Z,I) :- step(I), exog(Z), not no(Z,I).

  no(Z,I) :- step(I), exog(Z), not o(Z,I).


o(surge,1). 
:- o(break,1).


%!show_trace o(X,Y).

%!show_trace h(F,V,J): J>0.
%!trace {"% was initially %",F,V} h(F,V,0).
%!show_trace h(F,V,0).


